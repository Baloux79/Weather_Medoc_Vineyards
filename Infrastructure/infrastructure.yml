AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation infrastructure Template

Parameters:
  VPCWMVCidrBlock:
    Type: String
    Default: 155.156.0.0/16
    Description: Enter the main VPC_WMV CIDR block.
  AmiIdentifierPrivate:
    Type: String
    Default: ami-07851abe41c7da8f8
    Description: The AMI identifier to deploy.
  AmiIdentifierPublic:
    Type: String
    Default: ami-081903717c90324dc
    Description: The AMI identifier to deploy.
  S3BucketName:
    Type: String
    Default: wmv-storage-prod
    Description: Enter the name for the S3 bucket.
  FileEnvPrdBack:
    Type: String
    Description: Backend Env file path on google drive
  FileEnvPrdFront:
    Type: String
    Description: Frontend Env file path on google drive
  

# VPC
Resources:
  VPCWMV:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true      # Enable DNS hostnames
      CidrBlock: !Ref VPCWMVCidrBlock
      Tags:
        - Key: Name
          Value: 'MainVPC_WMV'

# SUBNETS
  PublicSubnetWMVa:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3a
      CidrBlock: !Select [100, !Cidr [!GetAtt VPCWMV.CidrBlock, 101, 8]]
      Tags:
        - Key: Name
          Value: 'MainVPC_WMV-public'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPCWMV

  PublicSubnetWMVb:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3b
      CidrBlock: !Select [101, !Cidr [!GetAtt VPCWMV.CidrBlock, 102, 8]]
      Tags:
        - Key: Name
          Value: 'MainVPC_WMV-public'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPCWMV

  PrivateSubnetWMVa:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3a
      CidrBlock: !Select [0, !Cidr [!GetAtt VPCWMV.CidrBlock, 1, 8]]
      Tags:
        - Key: Name
          Value: 'MainVPC_WMV-private'
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPCWMV

  PrivateSubnetWMVb:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3b
      CidrBlock: !Select [1, !Cidr [!GetAtt VPCWMV.CidrBlock, 2, 8]]
      Tags:
        - Key: Name
          Value: 'MainVPC_WMV-private'
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPCWMV

# INTERNET GATEWAY
  InternetGatewayWMV:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 'MainVPC_WMV-InternetGateway'

  AttachInternetGatewayWMV:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCWMV
      InternetGatewayId: !Ref InternetGatewayWMV


# ELASTIC IPs
  NatEipWMVa:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatEipWMVb:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc


# NAT
  NatGatewayWMVa:
    DependsOn: AttachInternetGatewayWMV
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipWMVa.AllocationId
      SubnetId: !Ref PublicSubnetWMVa
      Tags:
        - Key: Name
          Value: 'MainVPC-nat_WMVa'

  NatGatewayWMVb:
    DependsOn: AttachInternetGatewayWMV
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipWMVb.AllocationId
      SubnetId: !Ref PublicSubnetWMVb
      Tags:
        - Key: Name
          Value: 'MainVPC-nat_WMVb'


# TABLES PUBLIC
  PublicRouteTableWMVa:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCWMV
      Tags:
        - Key: Name
          Value: 'MainVPC_WMV-route-publicA'

  AttachPublicRouteTableWMVa:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableWMVa
      SubnetId: !Ref PublicSubnetWMVa

  PublicRouteTableWMVb:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCWMV
      Tags:
        - Key: Name
          Value: 'MainVPC_WMV-route-publicB'

  AttachPublicRouteTableWMVb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableWMVb
      SubnetId: !Ref PublicSubnetWMVb

# TABLES PRIVATE
  PrivateRouteTableWMVa:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCWMV
      Tags:
        - Key: Name
          Value: MainVPC_WMV-route-privateA

  AttachPrivateRouteTableWMVa:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableWMVa
      SubnetId: !Ref PrivateSubnetWMVa

  PrivateRouteTableWMVb:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCWMV
      Tags:
        - Key: Name
          Value: MainVPC_WMV-route-privateB

  AttachPrivateRouteTableWMVb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableWMVb
      SubnetId: !Ref PrivateSubnetWMVb

# ROADS
  PublicRouteWMVa:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayWMV
      RouteTableId: !Ref PublicRouteTableWMVa

  PublicRouteWMVb:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGatewayWMV
      RouteTableId: !Ref PublicRouteTableWMVb

  PrivateRouteWMVa:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayWMVa
      RouteTableId: !Ref PrivateRouteTableWMVa

  PrivateRouteWMVb:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayWMVb
      RouteTableId: !Ref PrivateRouteTableWMVb

# Security group and NACL
  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Public Security Group
      VpcId: !Ref VPCWMV
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Public_security_group


  LoadBalancerSecurityGroupPublic:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LoadBalancer Security Group Public
      VpcId: !Ref VPCWMV
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: LoadBalancer_security_group

  LoadBalancerSecurityGroupPrivate:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: LoadBalancer Security Group Private
      VpcId: !Ref VPCWMV
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: LoadBalancer_security_group

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Private Security Group
      VpcId: !Ref VPCWMV
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Private_security_group

# NACL
  MyNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPCWMV

  
  MyNetworkAclEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 100
      Protocol: -1 # -1 represents all protocols
      PortRange:
        From: 0
        To: 65535 # This range covers all ports
      Egress: false # Inbound rule
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  MyNetworkAclEntry2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyNetworkAcl
      RuleNumber: 200
      Protocol: -1 # -1 represents all protocols
      PortRange:
        From: 0
        To: 65535 # This range covers all ports
      Egress: true # Outbound rule
      RuleAction: allow
      CidrBlock: 0.0.0.0/0


# ASSOCIATION SUBNETS-NACLSs
  MySubnetAssociationPublicA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref  PublicSubnetWMVa
      NetworkAclId: !Ref MyNetworkAcl

  MySubnetAssociationPublicB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref  PublicSubnetWMVb
      NetworkAclId: !Ref MyNetworkAcl


  MySubnetAssociationPrivateA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref  PrivateSubnetWMVa
      NetworkAclId: !Ref MyNetworkAcl

  MySubnetAssociationPrivateB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref  PrivateSubnetWMVb
      NetworkAclId: !Ref MyNetworkAcl

# IAM RÃ´le for S3_access_full

  S3FullAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: S3FullAccessRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  S3FullAccessInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref S3FullAccessRole

  PublicLaunchConfig: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: True
      ImageId: !Ref AmiIdentifierPublic
      InstanceType: t3.large
      SecurityGroups:
        - !Ref PublicSecurityGroup
      KeyName: JLE_pytorch_paris
      IamInstanceProfile: !Ref S3FullAccessInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          apt-get update -y
          pip install gdown
          cd /home/ubuntu       
          if [ -d "Weather_Medoc_Vineyards" ]; then
            rm -rf Weather_Medoc_Vineyards
          fi   
          git clone -b develop https://github.com/MLops-Fr-2023/Weather_Medoc_Vineyards.git          
          cd /home/ubuntu/Weather_Medoc_Vineyards/Frontend
          sudo gdown --fuzzy ${FileEnvPrdFront}
          sudo mv -f env_frontend .env
          ./run_docker_compose.sh
          rm .env
          

  PrivateLaunchConfig: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: False
      ImageId: !Ref AmiIdentifierPrivate
      InstanceType: t3.large
      SecurityGroups:
        - !Ref PrivateSecurityGroup
      KeyName: JLE_pytorch_paris
      IamInstanceProfile: !Ref S3FullAccessInstanceProfile
      UserData:
         Fn::Base64: !Sub |
          #!/bin/bash -xe
          apt-get update -y
          pip install gdown    
          cd /home/ubuntu
          if [ -d "Weather_Medoc_Vineyards" ]; then
            rm -rf Weather_Medoc_Vineyards
          fi
          git clone -b develop https://github.com/MLops-Fr-2023/Weather_Medoc_Vineyards.git          
          cd /home/ubuntu/Weather_Medoc_Vineyards/Backend
          sudo gdown --fuzzy ${FileEnvPrdBack}
          sudo mv -f env_backend .env
          ./run_docker_compose.sh
          rm .env         

#Scaling Group
  PublicScalingGroup:
      DependsOn: PublicTargetGroup
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        LaunchConfigurationName: !Ref PublicLaunchConfig
        AvailabilityZones:
          - Fn::Select: [0, Fn::GetAZs: !Ref AWS::Region]
          - Fn::Select: [1, Fn::GetAZs: !Ref AWS::Region]
        VPCZoneIdentifier:
          - !Ref PublicSubnetWMVa
          - !Ref PublicSubnetWMVb
        DesiredCapacity: 1
        MinSize: 1
        MaxSize: 4
        TargetGroupARNs: 
          - !Ref PublicTargetGroup


  PrivateAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref PrivateLaunchConfig
      AvailabilityZones:
          - Fn::Select: [0, Fn::GetAZs: !Ref AWS::Region]
          - Fn::Select: [1, Fn::GetAZs: !Ref AWS::Region]
      VPCZoneIdentifier:
        - !Ref PrivateSubnetWMVa
        - !Ref PrivateSubnetWMVb
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 2
      TargetGroupARNs: 
        - !Ref PrivateTargetGroup

#Target Groups
  PublicTargetGroup: 
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties: 
        Port: 8501
        Protocol: HTTP
        VpcId: !Ref VPCWMV

  PrivateTargetGroup: 
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties: 
        Port: 8000
        Protocol: HTTP
        VpcId: !Ref VPCWMV

#LoadBalancer
  PublicLoadBalancer: 
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Type: application
        Scheme: internet-facing
        SecurityGroups:
          - !Ref LoadBalancerSecurityGroupPublic
        Subnets:
          - !Ref PublicSubnetWMVa
          - !Ref PublicSubnetWMVb

  PrivateLoadBalancer: 
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: 'app-internal-myapp' # Use the desired DNS name
        Type: application
        Scheme: internal
        SecurityGroups:
          - !Ref LoadBalancerSecurityGroupPrivate
        Subnets:
          - !Ref PrivateSubnetWMVa
          - !Ref PrivateSubnetWMVb


#Hosted Zone and DNS Alis for Load Balancer

  MyPrivateHostedZone:
    Type: AWS::Route53::HostedZone
    DependsOn: PrivateLoadBalancer
    Properties:
      Name: 'internal.myapp'  # Replace with your domain name
      VPCs:
        - VPCId: !Ref VPCWMV
          VPCRegion: !Ref AWS::Region

  PrivateLoadBalancerAliasRecord:
    Type: AWS::Route53::RecordSetGroup
    DependsOn: 
      - MyPrivateHostedZone
      - PrivateLoadBalancer
    Properties:
      HostedZoneId: !Ref MyPrivateHostedZone
      RecordSets:
      - Name: 'app.internal.myapp'
        Type: A
        AliasTarget:
          DNSName: !GetAtt 'PrivateLoadBalancer.DNSName'  # Use the DNSName attribute directly
          HostedZoneId: !GetAtt 'PrivateLoadBalancer.CanonicalHostedZoneID'

#Listener
  PublicLoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties: 
        LoadBalancerArn: !Ref PublicLoadBalancer
        Port: 80
        Protocol: HTTP
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref PublicTargetGroup
  
  PrivateLoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties: 
        LoadBalancerArn: !Ref PrivateLoadBalancer
        Port: 80
        Protocol: HTTP
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref PrivateTargetGroup

# S3 BUCKET
  bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref S3BucketName
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Ref S3BucketName


  MyBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowAccessFromSuperUser
            Effect: Allow
            Principal:
              AWS: arn:aws:iam::131674823919:user/SuperUser
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Resource:
              - !Sub "arn:aws:s3:::${bucket}"
              - !Sub "arn:aws:s3:::${bucket}/*"

# VPC ENDPOINT FOR S3
  VpcEndpointS3:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref VPCWMV
      ServiceName: !Join ['', ['com.amazonaws.', !Ref 'AWS::Region', '.s3']]
      RouteTableIds:
        - !Ref PrivateRouteTableWMVa
        - !Ref PrivateRouteTableWMVb


Outputs:
  VPCOutput:
    Value: !Ref VPCWMV

  PublicSubnetOutputWMVa:
    Value: !Ref PublicSubnetWMVa

  PublicSubnetOutputWMVb:
    Value: !Ref PublicSubnetWMVb

  PrivateSubnetOutputWMVa:
    Value: !Ref PrivateSubnetWMVa

  PrivateSubnetOutputWMVb:
    Value: !Ref PrivateSubnetWMVb

  S3BucketOutput:
    Value: !Ref bucket
