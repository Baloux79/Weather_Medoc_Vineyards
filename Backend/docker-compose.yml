version: '3.3'
services:
  db_mysql:
    restart: always
    build: 
      context: ./databases
    container_name: db_mysql
    volumes:
      - db_data:/var/lib/mysql
    networks:
        - backend
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    
  api:
    restart: always
    build:
      context: ./api
    container_name: api
    networks:
        - backend
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - TERM=xterm-256color
    ports:
      - "8000:8000"
    depends_on:
      - db_mysql

  db:
    restart: always
    image: postgres:13
    container_name: mlflow_db
    expose:
        - ${DB_MLF_PORT}
    networks:
        - backend
    environment:
        - MUID=${UID}
        - MGID=${GID}
        - POSTGRES_DB=${DB_MLF_NAME}
        - POSTGRES_USER=${DB_MLF_USER}
        - POSTGRES_PASSWORD=${DB_MLF_PW}
    volumes:
        - db_datapg:/var/lib/postgresql/data
        - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  app:
    restart: always
    build:
      context: ./mlflow
    image: mlflow_server
    container_name: mlflow_server
    expose:
        - ${MLFLOW_PORT}
    networks:
        - frontend
        - backend
    environment:
      #Backend configuration
        - BACKEND=postgresql://${DB_MLF_USER}:${DB_MLF_PW}@db:${DB_MLF_PORT}/${DB_MLF_NAME}

      # For artifact store in AWS S3 (note boto was installed in container):
        - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
        
      #Bucket configuration
        - ARTIFACTS=${ARTIFACTS}
        - MLFLOW_PORT=${MLFLOW_PORT}
        - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
        - MLFLOW_S3_URL=${MLFLOW_S3_URL}
        - HOST_MLFLOW_IP=${HOST_MLFLOW_IP}
    volumes:
        - mlrun_data:/mlruns
    command: 
        - sh
        - -c

# MLflow Tracking Server used exclusively as proxied access host for artifact storage access
        # - mlflow server
        #   --artifacts-destination $${ARTIFACTS}
        #   --host $${HOST_MLFLOW_IP}
        #   --port $${MLFLOW_PORT}
        #   --serve-artifacts

# MLflow Tracking Server enabled with proxied artifact storage access
        - mlflow server
            --port $${MLFLOW_PORT}
            --host $${HOST_MLFLOW_IP}
            --backend-store-uri $${BACKEND} 
            --default-artifact-root $${ARTIFACTS}
            --serve-artifacts

    depends_on:
        - db

  nginx:
      restart: always
      build: ./nginx
      image: mlflow_nginx
      container_name: mlflow_nginx
      ports:
          - ${NGINX_MLFLOW_PORT}:80
      networks:
          - frontend
      depends_on:
          - app

networks:
  frontend:
      driver: bridge
  backend:
      driver: bridge

volumes:
  db_datapg: {}
  mlrun_data: {}
  db_data: {}

